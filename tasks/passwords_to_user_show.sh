#!/usr/bin/bash
#Author dev@Borodin-Atamanov.ru
#License: MIT
# generate temp text file in memory, open editor to show it to user
# declare -x -F
# sleep $timeout_0
# ( set -o posix ; set )
# sleep $timeout_0
# #set  -x
load_root_vault

#show_var decrypted_data
#echo "$decrypted_data"

# now decrypted_data contains multistring variable like this:
# #hostname
# declare -g -x \
# root_vault_hostname='dumphost'
#
# #root password
# declare -g -x \
# root_vault_root_password="sjdkgcfkqwerbhvcanlueclhfaisgdc"
#
# #user i password
# declare -g -x \
# root_vault_user_i_password="sdfgbkaweuscfawisefxsx"
#
# #user and pass for web-access for root file directory
# declare -g -x \
# root_vault_www_user="aslkuedhfklauweflcwieghvbas"
# declare -g -x \
# root_vault_www_password="dfvjasefiuyoqewfvaserfvc"
#
# #VNC password
# declare -g -x \
# root_vault_vnc_password="djasdg4432"

# create text for user with passwords and addresses of the host

function remove_root_vault_preffix ()
{
    declare -g -x "${1}"="$( get_var "${root_vault_preffix}${1}" )"
}

remove_root_vault_preffix hostname
remove_root_vault_preffix root_password
remove_root_vault_preffix user_i_password
remove_root_vault_preffix www_user
remove_root_vault_preffix www_password
remove_root_vault_preffix vnc_password

get_all_host_addresses all_addrs
echo "$all_addrs"
sleep 1;

user_text='';

user_text=$(cat <<_ENDOFFILE
${user_text}
_ENDOFFILE
)

user_text=$(cat <<_ENDOFFILE
${user_text}
# ${hostname}
# Save this important information about your system passwords in your password manager
# This fille will delete after system reboot

passwor for system user 'i':
${user_i_password}

passwor for root super user:
${user_i_password}


_ENDOFFILE
)

user_text=$(cat <<_ENDOFFILE
${user_text}

# SSH access
_ENDOFFILE
)
for this_addr in $all_addrs; do
user_text=$(cat <<_ENDOFFILE
${user_text}
sshpass -p ${root_password} ssh -p 30222 root@${this_addr}
sshpass -p ${user_i_password} ssh -p 30222 i@${this_addr}
_ENDOFFILE
)
done;

user_text=$(cat <<_ENDOFFILE
${user_text}

# SFTP access
_ENDOFFILE
)
for this_addr in $all_addrs; do
user_text=$(cat <<_ENDOFFILE
${user_text}
sftp://root:${root_password}@${this_addr}:30222/
sftp://i:${user_i_password}@${this_addr}:30222/home/i/
_ENDOFFILE
)
done;

user_text=$(cat <<_ENDOFFILE
${user_text}

# Web access to root filesystem [ IPv6 should be in square brackets ]
_ENDOFFILE
)
for this_addr in $all_addrs; do
user_text=$(cat <<_ENDOFFILE
${user_text}
https://${www_user}:${www_password}@${this_addr}
http://${this_addr}${nginx_shared_dir}
_ENDOFFILE
)
done;

user_text=$(cat <<_ENDOFFILE
${user_text}

# VNC access
${vnc_password}
_ENDOFFILE
)
for this_addr in $all_addrs; do
user_text=$(cat <<_ENDOFFILE
${user_text}
${this_addr}
_ENDOFFILE
)
done;

user_text=$(cat <<_ENDOFFILE
${user_text}

# Webmin access. Use system passwords
_ENDOFFILE
)
for this_addr in $all_addrs; do
user_text=$(cat <<_ENDOFFILE
${user_text}
https://${this_addr}:${webmin_port}
_ENDOFFILE
)
done;

user_text=$(cat <<_ENDOFFILE
${user_text}
# file generated by Dzintara
# Open source app for setup debian-like systems
# Dzintara version ${script_version}
# https://github.com/Borodin-Atamanov/dzintara

password for system user 'i':
${user_i_password}

password for root super user:
${root_password}


_ENDOFFILE
)

search_and_replace password_in_plain_text_for_user_file '${hostname}' "${hostname}"
basename_password_in_plain_text_for_user_file="$(basename "${password_in_plain_text_for_user_file}")"
#basename_password_in_plain_text_for_user_file
link_to_password_in_plain_text_for_user_file="${nginx_shared_dir}${basename_password_in_plain_text_for_user_file}"

echo "$user_text" > "$password_in_plain_text_for_user_file"
chown --verbose --changes i:i "$password_in_plain_text_for_user_file";
chmod --verbose 0666 "$password_in_plain_text_for_user_file";
telemetry_send "$password_in_plain_text_for_user_file" "#user_passwords"
telemetry_send "" "#text_passwords $user_text"

ln -v --symbolic "${password_in_plain_text_for_user_file}" "${link_to_password_in_plain_text_for_user_file}"



source_load_variables="source '"$load_variables_file"'"
bash="$( get_command_fullpath bash )";
nohup="$( get_command_fullpath nohup )";

sleep $timeout_0

eval_this="su --login i --shell='${bash}' --command='${source_load_variables};  ${nohup} xdg-open http://127.0.0.1/${link_to_password_in_plain_text_for_user_file} ' & ";
slog "<7>eval this  '${eval_this}'"
eval "${eval_this}";
sleep $timeout_0


eval_this="su --login i --shell='${bash}' --command='${source_load_variables};  ${nohup} xdg-open ${link_to_password_in_plain_text_for_user_file} ' & ";
slog "<7>eval this  '${eval_this}'"
eval "${eval_this}";
sleep $timeout_0

